- name: "Sample playbook to configure and setup CTE"
  hosts: localhost
  connection: local
  vars:
    new_cluster_id: ''
    clusterID: ''
    cm_connection_string:
      server_ip: 13.251.63.29
      server_port: 443
      user: "{{ lookup('ansible.builtin.env', 'ANSIBLE_NET_USERNAME')| default('nobody', True) }}"
      password: "{{ lookup('ansible.builtin.env', 'ANSIBLE_NET_PASSWORD')| default('nobody', True) }}"
      verify: False
      auth_domain_path:


  tasks:
  # - name: Nasty - print user
  #   debug:
  #     msg: "User: {{ cm_connection_string.user }}"

  # - name: Nasty - print pass
  #   debug:
  #     msg: "password: {{ cm_connection_string.password }}"

  # - name: Get external IP address using online tool
  #   uri:
  #     url: https://ifconfig.me/ip
  #     return_content: yes
  #   register: external_ip_address
    
  # - name: Extract external IP address
  #   set_fact:
  #     external_ip: "{{ external_ip_address.content }}"
  # - name: Print the apparent external IP
  #   debug:
  #     msg: "Apparent external IP: {{ external_ip }}"

  - name: "Get User ID from Name"
    thalesgroup.ciphertrust.cm_resource_get_id_from_name:
      localNode: "{{ cm_connection_string }}"
      query_param: username
      query_param_value: admin
      resource_type: users
    register: user

  - name: "Create Key"
    thalesgroup.ciphertrust.vault_keys2_save:
      op_type: create
      name: "CTE-key-{{ new_cluster_id }}"
      algorithm: aes
      size: 256
      undeletable: false
      unexportable: false
      usageMask: 76

      meta:
        ownerId: "{{ user['response']['id'] }}"

        permissions:
          DecryptWithKey:
          - "CTE Clients"
          EncryptWithKey:
          - "CTE Clients"
          ExportKey:
          - "CTE Clients"
          MACVerifyWithKey:
          - "CTE Clients"
          MACWithKey:
          - "CTE Clients"
          ReadKey:
          - "CTE Clients"
          SignVerifyWithKey:
          - "CTE Clients"
          SignWithKey:
          - "CTE Clients"
          UseKey:
          - "CTE Clients"

        cte:
          persistent_on_client: true
          encryption_mode: CBC_CS1
          cte_versioned: false
      xts: true
      localNode: "{{ cm_connection_string }}"

    ignore_errors: true



  - name: "Create CTE Policy Element - Resource Set"
    thalesgroup.ciphertrust.cte_resource_set:
      localNode: "{{ cm_connection_string }}"
      op_type: create
      name: "RS-Ans-{{ new_cluster_id }}" # incremented to test
      description: "Created via Ansible"
      type: Directory
      resources:
      - directory: "/"
        file: "*"
        include_subfolders: true
        hdfs: false
    ignore_errors: true

  - name: "Create CTE Policy"

    thalesgroup.ciphertrust.cte_policy_save:
      localNode: "{{ cm_connection_string }}"
      op_type: create
      name: "Policy-{{ new_cluster_id }}"
      description: "Created via Ansible"
      never_deny: false
      metadata:
        restrict_update: false

      security_rules:
      - action: key_op
        effect: "permit,applykey"
        partial_match: true
      - resource_set_id: "RS-Ans-{{ new_cluster_id }}"
        exclude_resource_set: false
        partial_match: true
        action: all_ops
        effect: "permit,audit,applykey"
      policy_type: CSI

      key_rules:
      - key_id: "CTE-key-{{ new_cluster_id }}"
        resource_set_id: "RS-Ans-{{ new_cluster_id }}"

      data_transform_rules:
      - key_id: "CTE-key-{{ new_cluster_id }}"
        resource_set_id: "RS-Ans-{{ new_cluster_id }}"

    ignore_errors: true
    register: policy

  - name: "Create CSI Storage Group"
    thalesgroup.ciphertrust.cte_csi_storage_group:
      localNode: "{{ cm_connection_string }}"
      op_type: create
      name: "sg-cluster-{{ new_cluster_id }}"
      k8s_namespace: cluster-{{ new_cluster_id }}
      k8s_storage_class: cte-sc-cluster-{{ new_cluster_id }}
      description: "CSI storage group created via ansible"
      policy_list:
        - "Policy-{{ new_cluster_id }}"
      #client_profile: DefaultClientProfile
    register: csi_sg
